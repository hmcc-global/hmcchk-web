const md5 = require("md5");

module.exports = {
  friendlyName: "Change User password recovery",

  description: "Change user password following the password recovery flow.",

  inputs: {
    token: {
      required: true,
      type: "string",
      description:
        "The password token that was generated by the `post-forgot-password` endpoint.",
    },
    password: {
      required: true,
      type: "string",
      description: "The new, unencrypted password.",
    },
  },

  exits: {
    success: {
      description: "Password changed successfully.",
    },
    invalidOrExpiredToken: {
      description:
        "The provided password token is invalid, expired, or has already been used.",
      responseType: "expired",
    },
  },

  fn: async function ({ token, password }, exits) {
    try {
      // Look up the entry with this reset token.
      const hashedToken = md5(token);
      const existing = await ResetPwdToken.findOne({
        token: hashedToken,
      });

      if (!existing || existing.used || existing.expiresAt <= Date.now()) {
        return exits.invalidOrExpiredToken();
      }

      // TODO: server-side validate new password

      // Hash the new password and store it.
      await User.updateOne({ email: existing.email }).set({
        password: await sails.helpers.passwords.hashPassword(password),
      });

      // Update the status of the token to used.
      await ResetPwdToken.updateOne({ token: hashedToken }).set({ used: true });

      return exits.success();
    } catch (err) {
      sails.log.error(err);
      return exits.error(err);
    }
  },
};
